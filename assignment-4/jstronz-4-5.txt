Let's explore an open-ended design problem to which we can apply our skills in the design of object-centered systems. You are the chief designer of a consulting firm and you have been hired by The First National Bank to upgrade its customer database. You have chosen to rewrite the database using C++. Each customer account consists of a savings account and a checking account.
+ Begin the design by developing a set of use cases for the combined account that will describe how a customer may interact with the account.
+ Based upon your design thus far, use CRC cards identify each of the classes that comprise your design. Be certain to identify the primary public and private aspects of each of the classes that make up a customer account.
+ Express each of the classes that you have identified in a class diagram. Don't get carried away here. There are only a couple of basic attributes of such an account.

+ associations, relates to others and by multiplicity
+ attributes, visibility name:type = optional default value
+ operations, `visibility name(parameter list): return type`

Use cases:
+ open/close an account
+ debit/credit money

Classes:
+ Transaction
    Attributes:
     + amount: 1
     + currency: usd
     + type: debit/credit
     - subtype: wire/branch
     + id:
     + visible:
+ Account
    Behaviors:
     + debit
     + credit
    Attributes (state):
     + owner
     + balance
     + type
     + history
     + active
    

+ AccountOwner
    Behavior:
     + close_account(id)
     + debit_account(id, transaction)
     + credit_accoutn(id, transaction)
    Attributes:
     + name
     - contact info
     - accounts
+ 
+ 

